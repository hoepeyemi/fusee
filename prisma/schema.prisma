// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  fullName        String
  firstName       String?  // Extract first name for wallet lookup
  phoneNumber     String?
  solanaWallet    String   @unique
  balance         Decimal  @default(0) @db.Decimal(18, 8) // User's vault balance
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sentTransfers     Transfer[] @relation("SenderTransfers")
  receivedTransfers Transfer[] @relation("ReceiverTransfers")
  deposits          Deposit[]  @relation("UserDeposits")
  withdrawals       Withdrawal[] @relation("UserWithdrawals")

  @@map("users")
}

model Wallet {
  id          Int      @id @default(autoincrement())
  firstName   String   @unique
  address     String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("wallets")
}

model Transfer {
  id            Int      @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  amount        Decimal  @db.Decimal(18, 8) // Support up to 18 digits with 8 decimal places
  fee           Decimal  @db.Decimal(18, 8) // Transfer fee (0.001%)
  netAmount     Decimal  @db.Decimal(18, 8) // Amount after fee deduction
  currency      String   @default("SOL") // Default to Solana
  status        TransferStatus @default(PENDING)
  transactionHash String? // Blockchain transaction hash
  notes         String?  // Optional transfer notes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sender        User     @relation("SenderTransfers", fields: [senderId], references: [id])
  receiver      User     @relation("ReceiverTransfers", fields: [receiverId], references: [id])
  fees          Fee[]    @relation("TransferFees")

  @@map("transfers")
}

model Vault {
  id            Int      @id @default(autoincrement())
  address       String   @unique
  name          String   @default("Main Vault")
  totalBalance  Decimal  @default(0) @db.Decimal(18, 8)
  feeBalance    Decimal  @default(0) @db.Decimal(18, 8) // Total fees collected
  currency      String   @default("SOL")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  deposits      Deposit[]    @relation("VaultDeposits")
  withdrawals   Withdrawal[] @relation("VaultWithdrawals")
  fees          Fee[]        @relation("VaultFees")

  @@map("vaults")
}

model Deposit {
  id            Int      @id @default(autoincrement())
  userId        Int
  vaultId       Int
  amount        Decimal  @db.Decimal(18, 8)
  currency      String   @default("SOL")
  status        DepositStatus @default(PENDING)
  transactionHash String? // Blockchain transaction hash
  notes         String?  // Optional deposit notes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation("UserDeposits", fields: [userId], references: [id])
  vault         Vault    @relation("VaultDeposits", fields: [vaultId], references: [id])

  @@map("deposits")
}

model Withdrawal {
  id            Int      @id @default(autoincrement())
  userId        Int
  vaultId       Int
  amount        Decimal  @db.Decimal(18, 8)
  currency      String   @default("SOL")
  status        WithdrawalStatus @default(PENDING)
  transactionHash String? // Blockchain transaction hash
  notes         String?  // Optional withdrawal notes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation("UserWithdrawals", fields: [userId], references: [id])
  vault         Vault    @relation("VaultWithdrawals", fields: [vaultId], references: [id])

  @@map("withdrawals")
}

model Fee {
  id            Int      @id @default(autoincrement())
  transferId    Int
  vaultId       Int
  amount        Decimal  @db.Decimal(18, 8) // Fee amount (0.001% of transfer)
  currency      String   @default("SOL")
  feeRate       Decimal  @db.Decimal(8, 6) // Fee rate (0.001% = 0.00001)
  status        FeeStatus @default(COLLECTED)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transfer      Transfer @relation("TransferFees", fields: [transferId], references: [id])
  vault         Vault    @relation("VaultFees", fields: [vaultId], references: [id])

  @@map("fees")
}

model WalletTransfer {
  id            Int      @id @default(autoincrement())
  fromWallet    String   // Source wallet address
  toWallet      String   // Destination wallet address
  amount        Decimal  @db.Decimal(18, 8) // Transfer amount
  fee           Decimal  @db.Decimal(18, 8) // Fee amount (0.001%)
  netAmount     Decimal  @db.Decimal(18, 8) // Amount after fee deduction
  currency      String   @default("SOL")
  status        WalletTransferStatus @default(PENDING)
  transactionHash String? // Blockchain transaction hash
  feeWalletAddress String // Address where fee was sent
  notes         String?  // Optional transfer notes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  fees          WalletFee[] @relation("WalletTransferFees")

  @@map("wallet_transfers")
}

model WalletFee {
  id            Int      @id @default(autoincrement())
  walletTransferId Int
  amount        Decimal  @db.Decimal(18, 8) // Fee amount (0.001% of transfer)
  currency      String   @default("SOL")
  feeRate       Decimal  @db.Decimal(8, 6) // Fee rate (0.001% = 0.00001)
  feeWalletAddress String // Address where fee was sent
  status        WalletFeeStatus @default(COLLECTED)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  walletTransfer WalletTransfer @relation("WalletTransferFees", fields: [walletTransferId], references: [id])

  @@map("wallet_fees")
}

enum TransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum DepositStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum FeeStatus {
  COLLECTED
  REFUNDED
  PENDING
}

enum WalletTransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WalletFeeStatus {
  COLLECTED
  REFUNDED
  PENDING
}
